from datetime import datetime

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telebot.async_telebot import AsyncTeleBot
from telegram_bot.config import TelegramRedis
from telegram_bot.main_bot.api_client import CRMAPIClient
from telegram_bot.main_bot.inline_keyboards import (
    create_postpone_keyboard,
    off_reminder_keyboard)
from telegram_bot.sender_bot.inline_keyboards import (
    task_link_and_postpone_mode_keyboard,
    task_link_keyboard,
    task_link_and_off_recurring_reminder_mode_keyboard
)

api = CRMAPIClient()
tr = TelegramRedis()


async def handler_get_keyboard_for_postpone_task(bot: AsyncTeleBot, call: CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ redis).
    –ï—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
    –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø–æ–≤–µ—â–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.
    """
    call_data = call.data.split("!") # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: postpone-task-mode!call:4f6e7680-e5cc-4f61-8a58-28bfc46f1f6c
    callback_key = call_data[1] # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏—è –≤ redis
    if not tr.check_key_exists(callback_key): # –ï—Å–ª–∏ –∫–ª—é—á–∞ —É–∂–µ –Ω–µ—Ç
        await bot.answer_callback_query(
            callback_query_id=call.id,
            text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ",
            show_alert=True
        )
        await bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id
        )
    else:
        keyboard_for_select_postpone = create_postpone_keyboard(
            callback_key
        )

        await bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            reply_markup=keyboard_for_select_postpone
        )

async def handler_confirm_postpone_task(bot: AsyncTeleBot, call: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –ó–∞–ø—Ä–æ—Å –∫ API-endpoint –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞.
    –ü—Ä–∏–º–µ—Ä –ø—Ä–∏—Ö–æ–¥—è—â–µ–≥–æ call.data: "c-p!hour!{callback_key}"
    """
    call_data = call.data.split('!')
    callback_key = call_data[2]

    if not tr.check_key_exists(callback_key): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞ –≤ redis
        await bot.answer_callback_query(
            callback_query_id=call.id,
            text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ",
            show_alert=True
        )
        await bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id
        )
    else:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        task_data = tr.get_task_callback(callback_key).split("!") # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: task!{task_id}!{task_url}
        period = call_data[1]
        telegram_id = call.from_user.id
        task_id = task_data[1]
        task_url = task_data[-1]
        original_message_text = call.message.text

        # –ü–æ–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—É–∑—É
        await bot.edit_message_text(
            text=f"{original_message_text}\n\n <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ. –ò—â—É –∑–∞–¥–∞—á—É... </b> üîç",
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            reply_markup=None,
            parse_mode="HTML",
        )

        api_response = await api.postpone_task(
            task_id=task_id,
            period=period,
            telegram_id=telegram_id
        )

        if api_response and api_response.get("status") == 200:
            new_date_str = api_response["data"]["must_be_completed_by"]

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            date_obj = datetime.fromisoformat(new_date_str)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            new_date = date_obj.strftime("%d.%m.%Y–≥. (–¥–æ %H:%M)")

            await bot.edit_message_text(
                text=f"{original_message_text}\n\n <b>–°—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω. –ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date}</b>",
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                reply_markup=task_link_keyboard(task_url=task_url),
                parse_mode="HTML",
            )
        else:
            await bot.answer_callback_query(
                callback_query_id=call.id,
                text="–û—à–∏–±–∫–∞.",
                show_alert=True
            )


async def handler_cancel_postpone_mode(bot: AsyncTeleBot, call: CallbackQuery):
    """
    –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    """
    call_data = call.data.split('!')
    callback_key = call_data[1]

    if not tr.check_key_exists(callback_key): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–∞ –≤ redis
        await bot.answer_callback_query(
            callback_query_id=call.id,
            text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ",
            show_alert=True
        )
        await bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id
        )
    else:
        await bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            reply_markup=task_link_and_postpone_mode_keyboard(
                callback_key
            )
        )


async def handle_task_postpone(bot: AsyncTeleBot, call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏.
    """
    _, period, task_id = call.data.split(':')
    telegram_id = call.from_user.id

    try:
        response = await api.postpone_task(
            task_id=int(task_id),
            period=period,
            telegram_id=telegram_id
        )

        if response.get('success'):
            await bot.answer_callback_query(
                call.id,
                f"–°—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ {period.replace('_', ' ')}!",
                show_alert=True
            )
        else:
            await bot.answer_callback_query(
                call.id,
                "–û—à–∏–±–∫–∞: " + response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                show_alert=True
            )
    except Exception as e:
        await bot.answer_callback_query(
            call.id,
            f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}",
            show_alert=True
        )


async def handler_enter_to_off_reminder_mode(
        bot: AsyncTeleBot, call: CallbackQuery
):
    """
    –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.
    """
    call_data = call.data.split('!')
    reminder_id = int(call_data[1])
    task_url = call_data[2]
    original_message_text = call.message.text

    await bot.edit_message_text(
        text=f"{original_message_text} \n\n "
             f"üü¢ üü¢ üü¢ üü¢ üü¢ üü¢ \n\n"
             f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.</b>",
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        parse_mode="HTML",
        reply_markup=off_reminder_keyboard(reminder_id=reminder_id, task_url=task_url)
    )


async def handler_exit_from_off_reminder_mode(
        bot: AsyncTeleBot, call: CallbackQuery
    ):
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    call_data = call.data.split('!')
    reminder_id = int(call_data[1])
    task_url = call_data[2]
    original_message_text = call.message.text.split("üü¢")[0].rstrip()

    await bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        parse_mode="HTML",
        text=original_message_text,
        reply_markup=task_link_and_off_recurring_reminder_mode_keyboard(
            reminder_id=reminder_id,
            task_url=task_url
        )
    )


async def handler_confirm_off_reminder(
    bot: AsyncTeleBot, call: CallbackQuery
    ):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    # –≤ call data: "conf-rem-off!{reminder_id}"
    call_data = call.data.split('!')
    reminder_id = int(call_data[1])
    telegram_id = call.from_user.id

    try:
        response = await api.turn_off_reminder(
            reminder_id=reminder_id,
            telegram_id=telegram_id
        )

        if response.status == 204:
            await bot.answer_callback_query(
                callback_query_id=call.id,
                text=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.",
                show_alert=True
            )
            await bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.id
            )
        else:
            await bot.answer_callback_query(
                call.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.",
                show_alert=True
            )
    except Exception as e:
        await bot.answer_callback_query(
            call.id,
            f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}",
            show_alert=True
        )